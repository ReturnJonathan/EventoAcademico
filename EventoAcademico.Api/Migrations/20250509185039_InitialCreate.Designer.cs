// <auto-generated />
using System;
using EventoAcademico.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventoAcademico.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250509185039_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventoAcademico.Modelos.Certificado", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<bool>("Asistencia")
                        .HasColumnType("boolean");

                    b.Property<int>("CodigoInscripcion")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreCertificado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoCertificado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.HasIndex("CodigoInscripcion")
                        .IsUnique();

                    b.ToTable("Certificados");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Evento", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("Lugar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Inscripcion", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<int>("CodigoEvento")
                        .HasColumnType("integer");

                    b.Property<int>("CodigoParticipante")
                        .HasColumnType("integer");

                    b.Property<int>("CodigoPonente")
                        .HasColumnType("integer");

                    b.Property<int>("CodigoSesion")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EventoCodigo")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaInscripcion")
                        .HasColumnType("date");

                    b.Property<int?>("ParticipanteCodigo")
                        .HasColumnType("integer");

                    b.Property<int?>("PonenteCodigo")
                        .HasColumnType("integer");

                    b.Property<int?>("SesionCodigo")
                        .HasColumnType("integer");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.HasIndex("ParticipanteCodigo");

                    b.HasIndex("PonenteCodigo");

                    b.HasIndex("SesionCodigo");

                    b.ToTable("Inscripciones");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Pago", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<int>("CodigoInscripcion")
                        .HasColumnType("integer");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Monto")
                        .HasColumnType("double precision");

                    b.Property<bool>("Pagado")
                        .HasColumnType("boolean");

                    b.HasKey("Codigo");

                    b.HasIndex("CodigoInscripcion")
                        .IsUnique();

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Participante", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Institucion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.ToTable("Participantes");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Ponente", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CodigoEvento")
                        .HasColumnType("integer");

                    b.Property<int>("CodigoSesion")
                        .HasColumnType("integer");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Institucion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.ToTable("Ponentes");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Sesion", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Codigo"));

                    b.Property<int>("CodigoEvento")
                        .HasColumnType("integer");

                    b.Property<int?>("EventoCodigo")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("HorarioFin")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HorarioInicio")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Sala")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.HasIndex("EventoCodigo");

                    b.ToTable("Sesiones");
                });

            modelBuilder.Entity("EventoPonente", b =>
                {
                    b.Property<int>("EventosCodigo")
                        .HasColumnType("integer");

                    b.Property<int>("PonentesCodigo")
                        .HasColumnType("integer");

                    b.HasKey("EventosCodigo", "PonentesCodigo");

                    b.HasIndex("PonentesCodigo");

                    b.ToTable("EventoPonente");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Certificado", b =>
                {
                    b.HasOne("EventoAcademico.Modelos.Inscripcion", "Inscripcion")
                        .WithOne("Certificado")
                        .HasForeignKey("EventoAcademico.Modelos.Certificado", "CodigoInscripcion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Inscripcion", b =>
                {
                    b.HasOne("EventoAcademico.Modelos.Evento", "Evento")
                        .WithMany("Inscripciones")
                        .HasForeignKey("EventoCodigo");

                    b.HasOne("EventoAcademico.Modelos.Participante", "Participante")
                        .WithMany("Inscripciones")
                        .HasForeignKey("ParticipanteCodigo");

                    b.HasOne("EventoAcademico.Modelos.Ponente", "Ponente")
                        .WithMany()
                        .HasForeignKey("PonenteCodigo");

                    b.HasOne("EventoAcademico.Modelos.Sesion", "Sesion")
                        .WithMany("Inscripciones")
                        .HasForeignKey("SesionCodigo");

                    b.Navigation("Evento");

                    b.Navigation("Participante");

                    b.Navigation("Ponente");

                    b.Navigation("Sesion");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Pago", b =>
                {
                    b.HasOne("EventoAcademico.Modelos.Inscripcion", "Inscripcion")
                        .WithOne("Pago")
                        .HasForeignKey("EventoAcademico.Modelos.Pago", "CodigoInscripcion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inscripcion");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Sesion", b =>
                {
                    b.HasOne("EventoAcademico.Modelos.Evento", "Evento")
                        .WithMany("Sesiones")
                        .HasForeignKey("EventoCodigo");

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("EventoPonente", b =>
                {
                    b.HasOne("EventoAcademico.Modelos.Evento", null)
                        .WithMany()
                        .HasForeignKey("EventosCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventoAcademico.Modelos.Ponente", null)
                        .WithMany()
                        .HasForeignKey("PonentesCodigo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Evento", b =>
                {
                    b.Navigation("Inscripciones");

                    b.Navigation("Sesiones");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Inscripcion", b =>
                {
                    b.Navigation("Certificado");

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Participante", b =>
                {
                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("EventoAcademico.Modelos.Sesion", b =>
                {
                    b.Navigation("Inscripciones");
                });
#pragma warning restore 612, 618
        }
    }
}
